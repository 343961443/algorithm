package com.zs.algorithm.common;

/**
 * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/jian-sheng-zi-lcof
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * <p>
 * 首先根据算术几何均值不等式（n1+n2+n3…+na）/a>=(n1xn2…na)^(1/a)，当且仅当n1=n2=…na时后者能取到最大值。因此我们可以得出若想要乘积最大，应该将绳子尽可能等分切割。
 * 那么问题来了，我们均等切割绳子，每一段要求多长呢？切成每段为1也是均等分，不过这样显然是不行的。那么到底怎么求每段的长度最优呢？
 * 我们假设分割a段，每段长度为x，则总长n=ax —》x^a= x^(n/x)= (x^(1/x)) ^(n), 即转化为求x^(1/x)的最大值。
 * 我们再对x求导可知x=e≈2.7时可以取到极大值。又因为当x取2时有2^(1/2)≈1.41； 当x取3时有3^(1/3)≈1.44。所以我们可以得出结论：
 * 要想得到乘积的最大值，我们应尽可能将绳子以3为单位分成多分。
 * 关于为什么切分为3的优先级最高 可以利用均值不等式求出乘积最大值 L(m)=(n/m)^m 对此式求导（可利用对数法），可以证明当 m=n/e 时，乘积取最大，此时每段绳子的长度为 n/(n/e)=e，自然对数e的值为2.718，显然接近3，所以总体来讲3最好
 * <p>
 * 当n≤3 时，按照规则应不切分，但由于题目要求必须剪成 m>1段，因此必须剪出一段长度为1的绳子，即返回 n - 1。
 * 当 n>3时，求n除以3的整数部分a和余数部分 b（即 n = 3a + b），并分为以下三种情况：
 * 当 b = 0时，直接返回 3^a；
 * 当 b = 1时，要将一个1+3转换为2+2，因此返回 3^(a-1)×4；
 * 当 b = 2时，返回 3^a ×2。
 */
public class CuttingRope {
    public int cuttingRope(int n) {

        if (n == 2) {
            return 1;
        }
        if (n == 3) {
            return 2;
        }
        int a = n / 3;
        int b = n % 3;
        if (b == 0) {
            return (int) Math.pow(3, a);
        }
        if (b == 1) {
            return (int) Math.pow(3, a - 1) * 4;
        }
        if (b == 2) {
            return (int) Math.pow(3, a) * 2;
        }
        return 0;

    }
}
